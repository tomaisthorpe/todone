// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  contexts Context[]
  tasks    Task[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Context {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String   @default("Home")
  color       String   @default("bg-gray-500")
  coefficient Float    @default(0.0)
  shared      Boolean  @default(false)
  archived    Boolean  @default(false)
  isInbox     Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("contexts")
}

enum TaskType {
  TASK
  HABIT
  RECURRING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum HabitType {
  STREAK
  LEARNING
  WELLNESS
  MAINTENANCE
}

model Task {
  id        String    @id @default(cuid())
  title     String
  project   String?
  priority  Priority  @default(MEDIUM)
  tags      String    @default("")  // Comma-separated tags for SQLite
  contextId String
  dueDate   DateTime?
  urgency   Float     @default(5.0)
  completed Boolean   @default(false)
  completedAt DateTime? // When the task was marked complete
  type      TaskType  @default(TASK)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Habit-specific fields
  habitType     HabitType?
  streak        Int?       @default(0)
  longestStreak Int?       @default(0)
  frequency     Int?       // frequency in days (1 = daily, 7 = weekly)

  // Recurring-specific fields  
  nextDue DateTime?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  context Context @relation(fields: [contextId], references: [id], onDelete: Cascade)

  habitCompletions HabitCompletion[]

  @@map("tasks")
}

model HabitCompletion {
  id          String   @id @default(cuid())
  taskId      String
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("habit_completions")
}
